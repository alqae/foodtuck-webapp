@charset "UTF-8";
// Add custom mixins, functions, etc. to this file.
//
// Breakpoint viewport sizes and media queries.
//
// Breakpoints are defined as a map of (name: minimum width), order from small to large:
//
//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)
//
// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.

// Name of the next breakpoint, or null for the last breakpoint.
//
//    >> breakpoint-next(sm)
//    md
//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    md
//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))
//    md
@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {
  $n: index($breakpoint-names, $name);
  @return if($n !=null and $n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);
}

// Minimum breakpoint width. Null for the smallest (first) breakpoint.
//
//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    576px
@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
  $min: map-get($breakpoints, $name);
  @return if($min !=0, $min, null);
}

// Maximum breakpoint width. Null for the largest (last) breakpoint.
// The maximum value is calculated as the minimum of the next one less 0.02px
// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.
// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max
// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.
// See https://bugs.webkit.org/show_bug.cgi?id=178261
//
//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    767.98px
@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {
  $next: breakpoint-next($name, $breakpoints);
  @return if($next, breakpoint-min($next, $breakpoints) - .02, null);
}

// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.
// Useful for making responsive utilities.
//
//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    ""  (Returns a blank string)
//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    "-sm"
@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {
  @return if(breakpoint-min($name, $breakpoints)==null, "", "-#{$name}");
}

// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);

  @if $min {
    @media (min-width: $min) {
      @content;
    }
  }

  @else {
    @content;
  }
}

// Media of at most the maximum breakpoint width. No query for the largest breakpoint.
// Makes the @content apply to the given breakpoint and narrower.
@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {
  $max: breakpoint-max($name, $breakpoints);

  @if $max {
    @media (max-width: $max) {
      @content;
    }
  }

  @else {
    @content;
  }
}

// Media that spans multiple breakpoint widths.
// Makes the @content apply between the min and max breakpoints
@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($lower, $breakpoints);
  $max: breakpoint-max($upper, $breakpoints);

  @if $min !=null and $max !=null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  }

  @else if $max ==null {
    @include media-breakpoint-up($lower, $breakpoints) {
      @content;
    }
  }

  @else if $min ==null {
    @include media-breakpoint-down($upper, $breakpoints) {
      @content;
    }
  }
}

// Media between the breakpoint's minimum and maximum widths.
// No minimum for the smallest breakpoint, and no maximum for the largest one.
// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.
@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  $max: breakpoint-max($name, $breakpoints);

  @if $min !=null and $max !=null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  }

  @else if $max ==null {
    @include media-breakpoint-up($name, $breakpoints) {
      @content;
    }
  }

  @else if $min ==null {
    @include media-breakpoint-down($name, $breakpoints) {
      @content;
    }
  }
}

// Simple mixin to convert PX to REM, $value should not include px.
// dev.to/nikolab/convert-px-to-rem-using-sass-3-methods-4ep2
// usage: font-size: to-rem(24) => font-size: 1.5rem
@function to-rem($value) {
  $remValue: calc($value / 16)+rem;
  @return $remValue;
}

// Mixin's to include all standard Bootstrap Padding and Margin classes.
@function map-get-or-key($map, $key) {
  @if map-has-key($map, $key) or map-has-key($map, -$key) {
    @if $key !="auto" and type-of($key)=="number" and $key < 0 {
      @return 0 - map-get($map, -$key);
    }

    @else {
      @return map-get($map, $key);
    }
  }

  @else if type-of($key)=="string" {
    @return unquote($key);
  }

  @else {
    @return $key;
  }
}

@function bsize($key) {
  @return map-get-or-key($spacers, $key);
}

@mixin m($space) {
  margin: bsize($space);
}

@mixin mt($space) {
  margin-top: bsize($space);
}

@mixin mb($space) {
  margin-bottom: bsize($space);
}

@mixin ms($space) {
  margin-left: bsize($space);
}

@mixin me($space) {
  margin-right: bsize($space);
}

@mixin p($space) {
  padding: bsize($space);
}

@mixin pt($space) {
  padding-top: bsize($space);
}

@mixin pb($space) {
  padding-bottom: bsize($space);
}

@mixin ps($space) {
  padding-left: bsize($space);
}

@mixin pe($space) {
  padding-right: bsize($space);
}

@mixin mx($space) {
  @include ms($space);
  @include me($space);
}

@mixin my($space) {
  @include mt($space);
  @include mb($space);
}

@mixin px($space) {
  @include ps($space);
  @include pe($space);
}

@mixin py($space) {
  @include pt($space);
  @include pb($space);
}

@mixin py($space, $space-sm, $space-xxl) {
  @include pt($space);
  @include pb($space);
}

// Card Boxshadows

// creating this anticipating needing to create a mixin - delete if it's not needed.
@mixin card-shadow() {
  box-shadow: 0px 35px 35px 0px rgba(0, 31, 93, 0.05);
}

/* Flexbox
// ================================================== */
.d--f {
  display: flex;
}

.d--if {
  display: inline-flex;
}

/* Flex direction */
.fd--r {
  flex-direction: row;
}

/* Default */
.fd--rr {
  flex-direction: row-reverse;
}

.fd--c {
  flex-direction: column;
}

.fd--cr {
  flex-direction: column-reverse;
}


/* Flex wrap */
.fw--n {
  flex-wrap: nowrap;
}

/* Default */
.fw--w {
  flex-wrap: wrap;
}

.fw--wr {
  flex-wrap: wrap-reverse;
}


/* Justify content */
.jc--fe {
  justify-content: flex-end;
}

.jc--fs {
  justify-content: flex-start;
}

/* Default */
.jc--c {
  justify-content: center;
}

.jc--sa {
  justify-content: space-around;
}

.jc--sb {
  justify-content: space-between;
}


/* Align items */
.ai--fs {
  align-items: flex-start;
}

.ai--c {
  align-items: center;
}

.ai--fe {
  align-items: flex-end;
}

.ai--s {
  align-items: stretch;
}

/* Default */
.ai--b {
  align-items: baseline;
}


/* Flex grow */
.fg--0 {
  flex-grow: 0;
}

/* Default */
.fg--1 {
  flex-grow: 1;
}


/* Flex shrink */
.fs--0 {
  flex-shrink: 0;
}

.fs--1 {
  flex-shrink: 1;
}

/* Default */


/* Flex basis */
.fb--a {
  flex-basis: auto;
}

/* Default */
.fb--0 {
  flex-basis: 0;
}


/* Align self */
.as--a {
  align-self: auto;
}

/* Default */
.as--fs {
  align-self: flex-start;
}

.as--c {
  align-self: center;
}

.as--fe {
  align-self: flex-end;
}

.as--s {
  align-self: stretch;
}

.as--b {
  align-self: baseline
}

@function unicode($str) {
  @return unquote("\"")+unquote(str-insert($str, "\\", 1))+unquote("\"");
}


$sizeUnit: rem;
$marginKey: 'm';
$paddingKey: 'p';
$separator: '-';
$sizes: (
  ('none', 0),
  ('xxs', 0.125),
  ('xs', 0.25),
  ('sm', 0.5),
  ('md', 1),
  ('lg', 2),
  ('xl', 4),
  ('xxl', 8),
);
$positions: (
  ('t', 'top'),
  ('r', 'right'),
  ('b', 'bottom'),
  ('l', 'left')
);

@function sizeValue($key, $value) {
  @return if($key =='none', 0, $value + $sizeUnit);
}

@each $size in $sizes {
  $sizeKey: nth($size, 1);
  $sizeValue: nth($size, 2);

  .#{$marginKey}#{$separator}#{$sizeKey} {
    margin: sizeValue($sizeKey, $sizeValue);
  }

  .#{$paddingKey}#{$separator}#{$sizeKey} {
    padding: sizeValue($sizeKey, $sizeValue);
  }

  @each $position in $positions {
    $posKey: nth($position, 1);
    $posValue: nth($position, 2);

    .#{$marginKey}#{$separator}#{$posKey}#{$separator}#{$sizeKey} {
      margin-#{$posValue}: sizeValue($sizeKey, $sizeValue);
    }

    .#{$paddingKey}#{$separator}#{$posKey}#{$separator}#{$sizeKey} {
      padding-#{$posValue}: sizeValue($sizeKey, $sizeValue);
    }
  }
}